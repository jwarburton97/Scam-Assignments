(define (main)
	(setPort (open (getElement ScamArgs 1) 'read))
    (define arg (readExpr))
	(println "(cyan " arg ") is " (cyan arg))
	(println "(yellow " arg ") is "(yellow arg))
	(println "(magenta " arg ") is "(magenta arg))
	(println "(cym " arg ") is "(cym arg))
    
)
(define pi 3.14159265358979323846)
(define (cym value)
    (define _cyan(cyan value))
	(define _yellow(yellow value))
	(define _magenta(magenta value))
    (define find_cyan(toHex(int(+ _cyan 0.00000001))))
    (define find_yellow(toHex(int(+ _yellow 0.00000001))))
	(define find_magenta(toHex(int(+ _magenta 0.00000001))))
	(string+ "#" find_cyan find_yellow find_magenta)
)
(define (cyan val)
    (int(* 255 (cos (/ (* (real val) pi) 200))))
)
(define (yellow val)
	(int(* 255 (+ 1 (* -1 (sin (* pi .01 val))))))
)
(define (magenta val)
	(int(/ (* 255 (+ 1 (cos (/ (* 3 pi (real val)) 200)))) 2))
)    
(define (toHex x)
	(cond
		((==(% x 16) 10)(define remainder "A"))
		((==(% x 16) 11)(define remainder "B"))
		((==(% x 16) 12)(define remainder "C"))
		((==(% x 16) 13)(define remainder "D"))
		((==(% x 16) 14)(define remainder "E"))
		((==(% x 16) 15)(define remainder "F"))
		(else (define remainder(% x 16)))
	)
	(cond
		((==(/ x 16) 10)(define divisor "A"))
		((==(/ x 16) 11)(define divisor "B"))
		((==(/ x 16) 12)(define divisor "C"))
		((==(/ x 16) 13)(define divisor "D"))
		((==(/ x 16) 14)(define divisor "E"))
		((==(/ x 16) 15)(define divisor "F"))
		(else (define divisor(/ x 16)))
	)
	(string+ (string divisor)(string remainder))
)