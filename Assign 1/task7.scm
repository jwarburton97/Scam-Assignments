(define (main)
  (setPort (open (getElement ScamArgs 1) 'read))
  (define arg1 (readExpr))
  (define arg2 (readExpr))
  (println "(halve " arg1 ") is " (halve arg1))
  (println "(double " arg1 ") is " (double arg1))
  (println "(div2? " arg1 ") is " (div2? arg1))
  (println "(ethiop " arg1 " " arg2 ") is " (ethiop arg1 arg2 0))
)
(define (ethiop arg1 arg2 arg3)
	(if (== arg2 1)
		(define answer (+ arg3 arg1))
		(begin ;allows multiple conditions
			(define temp (halve arg2))
			(if(div2Half? arg2 temp)
				(ethiop (double arg1) temp arg3)
				(begin
					(define answer (+ arg3 arg1))
					(ethiop (double arg1) temp answer)
				)
			)
		)	
	)
)
(define (double x)
	(+ x x)
)
(define (div2? x)
  (if (== (double (halve x)) x)
    #t
	#f
    )
  )

(define (div2Half? x y)
	(if (== (double y) x)
		#t
		#f
	)
)
(define (halve x)
  (define (halve-iter arg1 arg2 arg3)
    (cond
		((= arg1 1)
			(cond
				((or (= arg2 2) (= arg2 3)) (+ arg3 1))
				((> arg2 3) (halve-iter 2 arg2 arg3))
				(else arg3)
				)
			)
		(else
			(define tempDouble (double arg1))
			(if (> (double tempDouble) arg2)
			(halve-iter 1 (- arg2 tempDouble) (+ arg3 arg1))
			(halve-iter tempDouble arg2 arg3)
			)
			)
		)
		)
		(halve-iter 1 x 0)
  )