(include "queue.scm")
(include "gates.scm")
(include "nand.scm")


(define (inverter a output)
	(nand-gate a a output)
)
(define (and-gate a b output)
	(let ((c (make-wire)))
	(nand-gate a b c)
	(inverter c output)
	)
)
(define	(or-gate a b output)
	(let ((c (make-wire))
	(d (make-wire)))
	(inverter a c)
	(inverter b d)
	(nand-gate c d output)
	)
)
(define (nor-gate a b output)
	(let ((c (make-wire))
	(d (make-wire))
	(e (make-wire)))
	(inverter a c)
	(inverter b d)
	(nand-gate c d e)
	(inverter e output)	
	)
)
(define	(xor-gate a b output)
	(let ((c (make-wire))
	(d (make-wire))
	(e (make-wire)))
	(nand-gate a b c)
	(nand-gate a c d)
	(nand-gate b c e)
	(nand-gate d e output)
	)
)
(define (xnor-gate a b output)
	(let ((c (make-wire))
	(d (make-wire))
	(e (make-wire))
	(f (make-wire)))
	(nand-gate a b c)
	(nand-gate a c d)
	(nand-gate b c e)
	(nand-gate d e f)
	(inverter f output)
	)
)   
(define the-agenda (make-agenda))

(define (main) 
	(setPort (open (getElement ScamArgs 1) 'read))
    (define env this)
	(define (iter expr)
		(if (not (eof?)) (begin (eval expr env) (iter (readExpr))))
	)
	(iter (readExpr))
)