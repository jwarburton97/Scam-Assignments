(define (main)
	(setPort (open (getElement ScamArgs 1) 'read))
	(define env this)
	(define (iter expr) 
		(if (not (eof?)) 
			(begin (eval expr env) (iter (readExpr)))
		)
	) 
	(iter (readExpr))
)
(define (create n)
	(lambda(f)
		(lambda(x)
			(define a (f x))
			(cond 
				((= n 1) a)
				(else 
					(f (((create (dec n)) f) x)) 
				)
			)
		)
	)
)
(define pred 
	(lambda (n)
		(lambda (f)
			(lambda (x)
				(define a (lambda (g) (lambda (h) (h (g f)))))
				(define b (lambda (u) x))
				(define c (lambda (u) u)) 
				(((n a) b) c)
			)
		)
	)
)